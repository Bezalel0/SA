-- Max distance to consider enemies
local MAX_DISTANCE = 200

-- Toggle to enable or disable the functionality
getgenv().toggled = true

-- Backup the original RayIgnoreNonCollideWithIgnoreList function
getgenv().old = getgenv().old or require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList

if getgenv().toggled then
    -- Overwrite the RayIgnoreNonCollideWithIgnoreList function
    require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList = function(...)
        local nearestDistance, nearestEnemy = MAX_DISTANCE, nil
        local localPlayer = game:GetService("Players").LocalPlayer

        -- Iterate through all players
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player.Team ~= localPlayer.Team and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < nearestDistance then
                    nearestDistance, nearestEnemy = distance, player
                end
            end
        end

        -- Call the original function and get its arguments
        local args = {getgenv().old(...)}
        
        -- If the script is BulletEmitter or Taser and an enemy is found, modify the target
        local scriptName = tostring(getfenv(2).script)
        if (scriptName == "BulletEmitter" or scriptName == "Taser") and nearestEnemy then
            args[1] = nearestEnemy.Character.HumanoidRootPart
            args[2] = nearestEnemy.Character.HumanoidRootPart.Position
        end

        -- Return the modified or original arguments
        return unpack(args)
    end
else
    -- Restore the original function if toggled off
    require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList = getgenv().old
end
