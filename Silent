-- Configuration
local AIM_SMOOTHNESS = 0.1  -- Adjust this for smoother aim adjustments
local AIM_FOV = 100  -- Field of view within which the aim lock activates
local AIM_CHECK_INTERVAL = 0.1  -- Time in seconds between aim checks

-- Utility function to get the player's HumanoidRootPart
local function getHRP(player)
    return player.Character and player.Character:FindFirstChild("HumanoidRootPart")
end

-- Function to predict target's future position
local function predictTargetPosition(targetHRP, predictionTime)
    local velocity = targetHRP.Velocity
    local futurePosition = targetHRP.Position + (velocity * predictionTime)
    return futurePosition
end

-- Function to find the nearest enemy within the FOV
local function findNearestEnemy()
    local localPlayer = game:GetService("Players").LocalPlayer
    local localHRP = getHRP(localPlayer)
    if not localHRP then return nil end

    local closestEnemy = nil
    local shortestDistance = AIM_FOV

    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player ~= localPlayer and player.Team ~= localPlayer.Team then
            local enemyHRP = getHRP(player)
            if enemyHRP then
                local distance = (localHRP.Position - enemyHRP.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestEnemy = player
                end
            end
        end
    end

    return closestEnemy
end

-- Function to simulate aiming at the target
local function simulateAim(targetHRP)
    local localPlayer = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if not camera then return end

    local predictedPosition = predictTargetPosition(targetHRP, 0.5) -- Predict for half a second
    local screenPosition = camera:WorldToScreenPoint(predictedPosition)
    
    -- Simulate aiming by adjusting the crosshair position
    -- (Note: Adjust this part based on how the game handles crosshair adjustments)
    -- Here, we're just printing the predicted position as an example
    print("Aiming at: ", screenPosition.X, screenPosition.Y)
end

-- Main loop
while true do
    wait(AIM_CHECK_INTERVAL)  -- Time between checks

    local nearestEnemy = findNearestEnemy()
    if nearestEnemy and getHRP(nearestEnemy) then
        local enemyHRP = getHRP(nearestEnemy)
        simulateAim(enemyHRP)
    end
end
