-- Max distance to consider enemies
local MAX_DISTANCE = 200

-- Toggle to enable or disable the functionality
getgenv().toggled = true

-- Function to find the RayCast module in ReplicatedStorage
local function findRayCastModule()
    local replicatedStorage = game:GetService("ReplicatedStorage")

    local function recursiveSearch(parent)
        for _, child in ipairs(parent:GetChildren()) do
            if child:IsA("ModuleScript") and child.Name == "RayCast" then
                return child
            end
            local found = recursiveSearch(child)
            if found then
                return found
            end
        end
        return nil
    end

    return recursiveSearch(replicatedStorage)
end

-- Function to find the nearest enemy
local function findNearestEnemy()
    local nearestDistance, nearestEnemy = MAX_DISTANCE, nil
    local localPlayer = game:GetService("Players").LocalPlayer

    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Team ~= localPlayer.Team and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < nearestDistance then
                nearestDistance, nearestEnemy = distance, player
            end
        end
    end
    return nearestEnemy
end

if getgenv().toggled then
    local rayCastModule = findRayCastModule()

    if rayCastModule then
        local oldRayIgnoreNonCollideWithIgnoreList = require(rayCastModule).RayIgnoreNonCollideWithIgnoreList
        getgenv().old = oldRayIgnoreNonCollideWithIgnoreList

        require(rayCastModule).RayIgnoreNonCollideWithIgnoreList = function(...)
            local nearestEnemy = findNearestEnemy()

            -- Call the original function and get its arguments
            local args = {oldRayIgnoreNonCollideWithIgnoreList(...)}

            -- Debugging prints
            print("Script Name: " .. tostring(getfenv(2).script))
            print("Nearest Enemy: " .. (nearestEnemy and nearestEnemy.Name or "None"))

            -- If the script is BulletEmitter or Taser and an enemy is found, modify the target
            if (tostring(getfenv(2).script) == "BulletEmitter" or tostring(getfenv(2).script) == "Taser") and nearestEnemy then
                args[1] = nearestEnemy.Character.HumanoidRootPart
                args[2] = nearestEnemy.Character.HumanoidRootPart.Position
            end

            return unpack(args)
        end
    else
        warn("RayCast module not found in ReplicatedStorage.")
    end
else
    local rayCastModule = findRayCastModule()
    if rayCastModule then
        require(rayCastModule).RayIgnoreNonCollideWithIgnoreList = getgenv().old
    end
end
